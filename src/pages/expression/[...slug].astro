---
import { pull_works } from "../../api";
import { type Expression } from "../../models";
import Layout from "../../Layout.astro";


export async function getStaticPaths() {
	const works = await pull_works();
	let result = [] as any[]
	for (const work of works) {
		for (const expression of work.expressions) {
			result.push({params: {slug: expression.frbrUri}});
		}
	}
	return result
}

async function geExpression(frbrUri: string): Promise<Expression | undefined> {
	const works = await pull_works();
	for (const work of works) {
		for (const expression of work.expressions) {
			if (expression.frbrUri == `/${frbrUri}`) {
				return expression;
			}
		}
	}

	return undefined;
}

const { slug } = Astro.params;
const expression = await geExpression(slug)
const tocJson = JSON.stringify(expression?.tocJson["toc"]);
---

<Layout title={expression?.title}>
	<section class="hero is-info">
		<div class="hero-body">
			<p class="title">{expression?.title}</p>
		</div>
	</section>

	<section class="section">
		<div class="columns">
			<div class="column is-one-quarter">
				<div class="card">
					<div class="card-content">
						<div class="content">
							<la-table-of-contents-controller
								items={tocJson}
							></la-table-of-contents-controller>
						</div>
					</div>
				</div>
			</div>


			<div class="column">
				<div class="card">
					<div class="card-content">
						<div class="content">
							<la-decorate-terms popup-definitions link-terms></la-decorate-terms>
							<la-decorate-internal-refs popups flag></la-decorate-internal-refs>
							<la-akoma-ntoso frbr-expression-uri={ expression?.frbrUri } set:html={expression?.content}></la-akoma-ntoso >			
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
</Layout>
